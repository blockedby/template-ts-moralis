/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPrime {
  export type MemberStruct = {
    riskScore: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    created: PromiseOrValue<boolean>;
  };

  export type MemberStructOutput = [BigNumber, number, boolean] & {
    riskScore: BigNumber;
    status: number;
    created: boolean;
  };
}

export interface PrimeInterface extends utils.Interface {
  functions: {
    "__Prime_init(address[],uint256,uint256)": FunctionFragment;
    "availableAssets()": FunctionFragment;
    "blacklistMember(address)": FunctionFragment;
    "blocksPerDay()": FunctionFragment;
    "borrowRate(uint256,uint256)": FunctionFragment;
    "changeMemberRiskScore(address,uint256)": FunctionFragment;
    "changeProtocolRate(uint256)": FunctionFragment;
    "changeProtocolRateCollector(address)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "isAssetAvailable(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "membershipOf(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "penaltyRate(uint256)": FunctionFragment;
    "penaltyRatePerDay()": FunctionFragment;
    "protocolFeeRate()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestMembership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBlocksPerDay(uint256)": FunctionFragment;
    "updatePenaltyRatePerDay(uint256)": FunctionFragment;
    "whitelistMember(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Prime_init"
      | "availableAssets"
      | "blacklistMember"
      | "blocksPerDay"
      | "borrowRate"
      | "changeMemberRiskScore"
      | "changeProtocolRate"
      | "changeProtocolRateCollector"
      | "feeCollector"
      | "isAssetAvailable"
      | "isMember"
      | "membershipOf"
      | "owner"
      | "penaltyRate"
      | "penaltyRatePerDay"
      | "protocolFeeRate"
      | "renounceOwnership"
      | "requestMembership"
      | "transferOwnership"
      | "updateBlocksPerDay"
      | "updatePenaltyRatePerDay"
      | "whitelistMember"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Prime_init",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "availableAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blocksPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMemberRiskScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProtocolRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProtocolRateCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetAvailable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyRatePerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMembership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlocksPerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePenaltyRatePerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMember",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Prime_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocksPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMemberRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProtocolRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProtocolRateCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membershipOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penaltyRatePerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlocksPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePenaltyRatePerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMember",
    data: BytesLike
  ): Result;

  events: {
    "BlocksPerDayUpdated(uint256,uint256)": EventFragment;
    "FeeCollectorChanged(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MemberBlacklisted(address)": EventFragment;
    "MemberCreated(address)": EventFragment;
    "MemberWhitelisted(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PenaltyRatePerDayUpdated(uint256,uint256)": EventFragment;
    "ProtocolRateChanged(uint256,uint256)": EventFragment;
    "RiskScoreChanged(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlocksPerDayUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PenaltyRatePerDayUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskScoreChanged"): EventFragment;
}

export interface BlocksPerDayUpdatedEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type BlocksPerDayUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BlocksPerDayUpdatedEventObject
>;

export type BlocksPerDayUpdatedEventFilter =
  TypedEventFilter<BlocksPerDayUpdatedEvent>;

export interface FeeCollectorChangedEventObject {
  oldValue: string;
  newValue: string;
}
export type FeeCollectorChangedEvent = TypedEvent<
  [string, string],
  FeeCollectorChangedEventObject
>;

export type FeeCollectorChangedEventFilter =
  TypedEventFilter<FeeCollectorChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MemberBlacklistedEventObject {
  member: string;
}
export type MemberBlacklistedEvent = TypedEvent<
  [string],
  MemberBlacklistedEventObject
>;

export type MemberBlacklistedEventFilter =
  TypedEventFilter<MemberBlacklistedEvent>;

export interface MemberCreatedEventObject {
  member: string;
}
export type MemberCreatedEvent = TypedEvent<[string], MemberCreatedEventObject>;

export type MemberCreatedEventFilter = TypedEventFilter<MemberCreatedEvent>;

export interface MemberWhitelistedEventObject {
  member: string;
}
export type MemberWhitelistedEvent = TypedEvent<
  [string],
  MemberWhitelistedEventObject
>;

export type MemberWhitelistedEventFilter =
  TypedEventFilter<MemberWhitelistedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PenaltyRatePerDayUpdatedEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type PenaltyRatePerDayUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PenaltyRatePerDayUpdatedEventObject
>;

export type PenaltyRatePerDayUpdatedEventFilter =
  TypedEventFilter<PenaltyRatePerDayUpdatedEvent>;

export interface ProtocolRateChangedEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type ProtocolRateChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProtocolRateChangedEventObject
>;

export type ProtocolRateChangedEventFilter =
  TypedEventFilter<ProtocolRateChangedEvent>;

export interface RiskScoreChangedEventObject {
  member: string;
  score: BigNumber;
}
export type RiskScoreChangedEvent = TypedEvent<
  [string, BigNumber],
  RiskScoreChangedEventObject
>;

export type RiskScoreChangedEventFilter =
  TypedEventFilter<RiskScoreChangedEvent>;

export interface Prime extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrimeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Prime_init(
      stablecoins: PromiseOrValue<string>[],
      blocksPerDay_: PromiseOrValue<BigNumberish>,
      penaltyRatePerDay_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableAssets(overrides?: CallOverrides): Promise<[string[]]>;

    blacklistMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blocksPerDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowRate(
      interestRate: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeMemberRiskScore(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeProtocolRate(
      protocolFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeProtocolRateCollector(
      protocolCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    isAssetAvailable(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    membershipOf(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IPrime.MemberStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    penaltyRate(
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    penaltyRatePerDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestMembership(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBlocksPerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePenaltyRatePerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistMember(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __Prime_init(
    stablecoins: PromiseOrValue<string>[],
    blocksPerDay_: PromiseOrValue<BigNumberish>,
    penaltyRatePerDay_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableAssets(overrides?: CallOverrides): Promise<string[]>;

  blacklistMember(
    _member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blocksPerDay(overrides?: CallOverrides): Promise<BigNumber>;

  borrowRate(
    interestRate: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeMemberRiskScore(
    _member: PromiseOrValue<string>,
    _riskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeProtocolRate(
    protocolFeeRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeProtocolRateCollector(
    protocolCollector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  isAssetAvailable(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    _member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  membershipOf(
    _member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IPrime.MemberStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  penaltyRate(
    interval: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  penaltyRatePerDay(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestMembership(
    _requester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBlocksPerDay(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePenaltyRatePerDay(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistMember(
    _member: PromiseOrValue<string>,
    _riskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Prime_init(
      stablecoins: PromiseOrValue<string>[],
      blocksPerDay_: PromiseOrValue<BigNumberish>,
      penaltyRatePerDay_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableAssets(overrides?: CallOverrides): Promise<string[]>;

    blacklistMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    blocksPerDay(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRate(
      interestRate: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMemberRiskScore(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProtocolRate(
      protocolFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProtocolRateCollector(
      protocolCollector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    isAssetAvailable(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    membershipOf(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IPrime.MemberStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    penaltyRate(
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltyRatePerDay(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestMembership(
      _requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBlocksPerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePenaltyRatePerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistMember(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlocksPerDayUpdated(uint256,uint256)"(
      oldValue?: null,
      newValue?: null
    ): BlocksPerDayUpdatedEventFilter;
    BlocksPerDayUpdated(
      oldValue?: null,
      newValue?: null
    ): BlocksPerDayUpdatedEventFilter;

    "FeeCollectorChanged(address,address)"(
      oldValue?: null,
      newValue?: null
    ): FeeCollectorChangedEventFilter;
    FeeCollectorChanged(
      oldValue?: null,
      newValue?: null
    ): FeeCollectorChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MemberBlacklisted(address)"(
      member?: PromiseOrValue<string> | null
    ): MemberBlacklistedEventFilter;
    MemberBlacklisted(
      member?: PromiseOrValue<string> | null
    ): MemberBlacklistedEventFilter;

    "MemberCreated(address)"(
      member?: PromiseOrValue<string> | null
    ): MemberCreatedEventFilter;
    MemberCreated(
      member?: PromiseOrValue<string> | null
    ): MemberCreatedEventFilter;

    "MemberWhitelisted(address)"(
      member?: PromiseOrValue<string> | null
    ): MemberWhitelistedEventFilter;
    MemberWhitelisted(
      member?: PromiseOrValue<string> | null
    ): MemberWhitelistedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PenaltyRatePerDayUpdated(uint256,uint256)"(
      oldValue?: null,
      newValue?: null
    ): PenaltyRatePerDayUpdatedEventFilter;
    PenaltyRatePerDayUpdated(
      oldValue?: null,
      newValue?: null
    ): PenaltyRatePerDayUpdatedEventFilter;

    "ProtocolRateChanged(uint256,uint256)"(
      oldValue?: null,
      newValue?: null
    ): ProtocolRateChangedEventFilter;
    ProtocolRateChanged(
      oldValue?: null,
      newValue?: null
    ): ProtocolRateChangedEventFilter;

    "RiskScoreChanged(address,uint256)"(
      member?: PromiseOrValue<string> | null,
      score?: null
    ): RiskScoreChangedEventFilter;
    RiskScoreChanged(
      member?: PromiseOrValue<string> | null,
      score?: null
    ): RiskScoreChangedEventFilter;
  };

  estimateGas: {
    __Prime_init(
      stablecoins: PromiseOrValue<string>[],
      blocksPerDay_: PromiseOrValue<BigNumberish>,
      penaltyRatePerDay_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blocksPerDay(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRate(
      interestRate: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMemberRiskScore(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeProtocolRate(
      protocolFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeProtocolRateCollector(
      protocolCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    isAssetAvailable(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    membershipOf(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyRate(
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltyRatePerDay(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestMembership(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBlocksPerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePenaltyRatePerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistMember(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Prime_init(
      stablecoins: PromiseOrValue<string>[],
      blocksPerDay_: PromiseOrValue<BigNumberish>,
      penaltyRatePerDay_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklistMember(
      _member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blocksPerDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRate(
      interestRate: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMemberRiskScore(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeProtocolRate(
      protocolFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeProtocolRateCollector(
      protocolCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAssetAvailable(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membershipOf(
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyRate(
      interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penaltyRatePerDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestMembership(
      _requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBlocksPerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePenaltyRatePerDay(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistMember(
      _member: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
