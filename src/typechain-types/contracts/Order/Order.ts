/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IOrder {
  export type OrderStruct = {
    currentSize: PromiseOrValue<BigNumberish>;
    maxSize: PromiseOrValue<BigNumberish>;
    tenor: PromiseOrValue<BigNumberish>;
    depositWindow: PromiseOrValue<BigNumberish>;
    rateMantissa: PromiseOrValue<BigNumberish>;
    maturityDate: PromiseOrValue<BigNumberish>;
    depositMaturity: PromiseOrValue<BigNumberish>;
    activeRollId: PromiseOrValue<BigNumberish>;
    isPublic: PromiseOrValue<boolean>;
    isClosed: PromiseOrValue<boolean>;
    asset: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    protocolFeeRate: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    string,
    string,
    BigNumber
  ] & {
    currentSize: BigNumber;
    maxSize: BigNumber;
    tenor: BigNumber;
    depositWindow: BigNumber;
    rateMantissa: BigNumber;
    maturityDate: BigNumber;
    depositMaturity: BigNumber;
    activeRollId: BigNumber;
    isPublic: boolean;
    isClosed: boolean;
    asset: string;
    creator: string;
    protocolFeeRate: BigNumber;
  };
}

export interface OrderInterface extends utils.Interface {
  functions: {
    "__Order_init(address)": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "blacklistLenders(uint256,bytes)": FunctionFragment;
    "cancelCallBack(uint256)": FunctionFragment;
    "closeOrder(uint256)": FunctionFragment;
    "createOrder(address,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "dueOf(uint256,address)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getOrderData(uint256)": FunctionFragment;
    "lend(uint256,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "penaltyOf(uint256,address)": FunctionFragment;
    "rejectRoll(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256,address)": FunctionFragment;
    "repayAll(uint256)": FunctionFragment;
    "requestCallBack(uint256)": FunctionFragment;
    "rollOrder(uint256)": FunctionFragment;
    "setPrimeContract(address)": FunctionFragment;
    "switchToPublic(uint256)": FunctionFragment;
    "totalDueOf(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistLenders(uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Order_init"
      | "balanceOf"
      | "blacklistLenders"
      | "cancelCallBack"
      | "closeOrder"
      | "createOrder"
      | "dueOf"
      | "getBlockNumber"
      | "getBlockTimestamp"
      | "getOrderData"
      | "lend"
      | "multicall"
      | "owner"
      | "penaltyOf"
      | "rejectRoll"
      | "renounceOwnership"
      | "repay"
      | "repayAll"
      | "requestCallBack"
      | "rollOrder"
      | "setPrimeContract"
      | "switchToPublic"
      | "totalDueOf"
      | "transferOwnership"
      | "whitelistLenders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Order_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistLenders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCallBack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dueOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectRoll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCallBack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rollOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimeContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToPublic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDueOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistLenders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Order_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCallBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dueOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "penaltyOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectRoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCallBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrimeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDueOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistLenders",
    data: BytesLike
  ): Result;

  events: {
    "CallbackCancelled(uint256,address)": EventFragment;
    "CallbackCreated(uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Lended(uint256,address,uint256)": EventFragment;
    "LenderBlacklisted(uint256,address)": EventFragment;
    "LenderRejectedRoll(uint256,uint256,address)": EventFragment;
    "LenderWhitelisted(uint256,address)": EventFragment;
    "OrderActivated(uint256,uint256,uint256)": EventFragment;
    "OrderClosed(uint256)": EventFragment;
    "OrderConvertedToPublic(uint256)": EventFragment;
    "OrderCreated(uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
    "OrderRolled(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrimeContractChanged(address,address)": EventFragment;
    "Repayed(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallbackCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallbackCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LenderBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LenderRejectedRoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LenderWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderConvertedToPublic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderRolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrimeContractChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repayed"): EventFragment;
}

export interface CallbackCancelledEventObject {
  orderId: BigNumber;
  lender: string;
}
export type CallbackCancelledEvent = TypedEvent<
  [BigNumber, string],
  CallbackCancelledEventObject
>;

export type CallbackCancelledEventFilter =
  TypedEventFilter<CallbackCancelledEvent>;

export interface CallbackCreatedEventObject {
  orderId: BigNumber;
  lender: string;
}
export type CallbackCreatedEvent = TypedEvent<
  [BigNumber, string],
  CallbackCreatedEventObject
>;

export type CallbackCreatedEventFilter = TypedEventFilter<CallbackCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LendedEventObject {
  orderId: BigNumber;
  lender: string;
  amount: BigNumber;
}
export type LendedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LendedEventObject
>;

export type LendedEventFilter = TypedEventFilter<LendedEvent>;

export interface LenderBlacklistedEventObject {
  orderId: BigNumber;
  lender: string;
}
export type LenderBlacklistedEvent = TypedEvent<
  [BigNumber, string],
  LenderBlacklistedEventObject
>;

export type LenderBlacklistedEventFilter =
  TypedEventFilter<LenderBlacklistedEvent>;

export interface LenderRejectedRollEventObject {
  orderId: BigNumber;
  rollId: BigNumber;
  lender: string;
}
export type LenderRejectedRollEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LenderRejectedRollEventObject
>;

export type LenderRejectedRollEventFilter =
  TypedEventFilter<LenderRejectedRollEvent>;

export interface LenderWhitelistedEventObject {
  orderId: BigNumber;
  lender: string;
}
export type LenderWhitelistedEvent = TypedEvent<
  [BigNumber, string],
  LenderWhitelistedEventObject
>;

export type LenderWhitelistedEventFilter =
  TypedEventFilter<LenderWhitelistedEvent>;

export interface OrderActivatedEventObject {
  orderId: BigNumber;
  depositMaturity: BigNumber;
  maturityDate: BigNumber;
}
export type OrderActivatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  OrderActivatedEventObject
>;

export type OrderActivatedEventFilter = TypedEventFilter<OrderActivatedEvent>;

export interface OrderClosedEventObject {
  orderId: BigNumber;
}
export type OrderClosedEvent = TypedEvent<[BigNumber], OrderClosedEventObject>;

export type OrderClosedEventFilter = TypedEventFilter<OrderClosedEvent>;

export interface OrderConvertedToPublicEventObject {
  orderId: BigNumber;
}
export type OrderConvertedToPublicEvent = TypedEvent<
  [BigNumber],
  OrderConvertedToPublicEventObject
>;

export type OrderConvertedToPublicEventFilter =
  TypedEventFilter<OrderConvertedToPublicEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  size: BigNumber;
  rateMantissa: BigNumber;
  tenor: BigNumber;
  depositWindow: BigNumber;
  asset: string;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderRolledEventObject {
  orderId: BigNumber;
  rollId: BigNumber;
  newMaturity: BigNumber;
}
export type OrderRolledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  OrderRolledEventObject
>;

export type OrderRolledEventFilter = TypedEventFilter<OrderRolledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PrimeContractChangedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type PrimeContractChangedEvent = TypedEvent<
  [string, string],
  PrimeContractChangedEventObject
>;

export type PrimeContractChangedEventFilter =
  TypedEventFilter<PrimeContractChangedEvent>;

export interface RepayedEventObject {
  orderId: BigNumber;
  lender: string;
  amount: BigNumber;
}
export type RepayedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RepayedEventObject
>;

export type RepayedEventFilter = TypedEventFilter<RepayedEvent>;

export interface Order extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Order_init(
      primeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      asset: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      tenor: PromiseOrValue<BigNumberish>,
      rateMantissa: PromiseOrValue<BigNumberish>,
      depositWindow: PromiseOrValue<BigNumberish>,
      members: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dueOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { due: BigNumber; protocolFee: BigNumber }
    >;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrderData(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IOrder.OrderStructOutput] & { info: IOrder.OrderStructOutput }>;

    lend(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    penaltyOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rejectRoll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayAll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrimeContract(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchToPublic(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDueOf(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDue: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __Order_init(
    primeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    orderId: PromiseOrValue<BigNumberish>,
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklistLenders(
    orderId: PromiseOrValue<BigNumberish>,
    lenders: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelCallBack(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    asset: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    tenor: PromiseOrValue<BigNumberish>,
    rateMantissa: PromiseOrValue<BigNumberish>,
    depositWindow: PromiseOrValue<BigNumberish>,
    members: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dueOf(
    orderId: PromiseOrValue<BigNumberish>,
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { due: BigNumber; protocolFee: BigNumber }
  >;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderData(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IOrder.OrderStructOutput>;

  lend(
    orderId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  penaltyOf(
    orderId: PromiseOrValue<BigNumberish>,
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rejectRoll(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    orderId: PromiseOrValue<BigNumberish>,
    lender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayAll(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestCallBack(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrimeContract(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchToPublic(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDueOf(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistLenders(
    orderId: PromiseOrValue<BigNumberish>,
    lenders: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Order_init(
      primeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createOrder(
      asset: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      tenor: PromiseOrValue<BigNumberish>,
      rateMantissa: PromiseOrValue<BigNumberish>,
      depositWindow: PromiseOrValue<BigNumberish>,
      members: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dueOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { due: BigNumber; protocolFee: BigNumber }
    >;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderData(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IOrder.OrderStructOutput>;

    lend(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    penaltyOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectRoll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    repayAll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rollOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPrimeContract(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchToPublic(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDueOf(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CallbackCancelled(uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null
    ): CallbackCancelledEventFilter;
    CallbackCancelled(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null
    ): CallbackCancelledEventFilter;

    "CallbackCreated(uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null
    ): CallbackCreatedEventFilter;
    CallbackCreated(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null
    ): CallbackCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Lended(uint256,address,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null,
      amount?: null
    ): LendedEventFilter;
    Lended(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null,
      amount?: null
    ): LendedEventFilter;

    "LenderBlacklisted(uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: null
    ): LenderBlacklistedEventFilter;
    LenderBlacklisted(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: null
    ): LenderBlacklistedEventFilter;

    "LenderRejectedRoll(uint256,uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      rollId?: PromiseOrValue<BigNumberish> | null,
      lender?: null
    ): LenderRejectedRollEventFilter;
    LenderRejectedRoll(
      orderId?: PromiseOrValue<BigNumberish> | null,
      rollId?: PromiseOrValue<BigNumberish> | null,
      lender?: null
    ): LenderRejectedRollEventFilter;

    "LenderWhitelisted(uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: null
    ): LenderWhitelistedEventFilter;
    LenderWhitelisted(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: null
    ): LenderWhitelistedEventFilter;

    "OrderActivated(uint256,uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      depositMaturity?: null,
      maturityDate?: null
    ): OrderActivatedEventFilter;
    OrderActivated(
      orderId?: PromiseOrValue<BigNumberish> | null,
      depositMaturity?: null,
      maturityDate?: null
    ): OrderActivatedEventFilter;

    "OrderClosed(uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null
    ): OrderClosedEventFilter;
    OrderClosed(
      orderId?: PromiseOrValue<BigNumberish> | null
    ): OrderClosedEventFilter;

    "OrderConvertedToPublic(uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null
    ): OrderConvertedToPublicEventFilter;
    OrderConvertedToPublic(
      orderId?: PromiseOrValue<BigNumberish> | null
    ): OrderConvertedToPublicEventFilter;

    "OrderCreated(uint256,uint256,uint256,uint256,uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      size?: null,
      rateMantissa?: null,
      tenor?: null,
      depositWindow?: null,
      asset?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: PromiseOrValue<BigNumberish> | null,
      size?: null,
      rateMantissa?: null,
      tenor?: null,
      depositWindow?: null,
      asset?: null
    ): OrderCreatedEventFilter;

    "OrderRolled(uint256,uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      rollId?: PromiseOrValue<BigNumberish> | null,
      newMaturity?: null
    ): OrderRolledEventFilter;
    OrderRolled(
      orderId?: PromiseOrValue<BigNumberish> | null,
      rollId?: PromiseOrValue<BigNumberish> | null,
      newMaturity?: null
    ): OrderRolledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PrimeContractChanged(address,address)"(
      oldAddress?: null,
      newAddress?: null
    ): PrimeContractChangedEventFilter;
    PrimeContractChanged(
      oldAddress?: null,
      newAddress?: null
    ): PrimeContractChangedEventFilter;

    "Repayed(uint256,address,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null,
      amount?: null
    ): RepayedEventFilter;
    Repayed(
      orderId?: PromiseOrValue<BigNumberish> | null,
      lender?: PromiseOrValue<string> | null,
      amount?: null
    ): RepayedEventFilter;
  };

  estimateGas: {
    __Order_init(
      primeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrder(
      asset: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      tenor: PromiseOrValue<BigNumberish>,
      rateMantissa: PromiseOrValue<BigNumberish>,
      depositWindow: PromiseOrValue<BigNumberish>,
      members: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dueOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderData(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectRoll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayAll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrimeContract(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchToPublic(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDueOf(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Order_init(
      primeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      asset: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      tenor: PromiseOrValue<BigNumberish>,
      rateMantissa: PromiseOrValue<BigNumberish>,
      depositWindow: PromiseOrValue<BigNumberish>,
      members: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dueOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderData(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyOf(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectRoll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      orderId: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayAll(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestCallBack(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrimeContract(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchToPublic(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDueOf(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistLenders(
      orderId: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
